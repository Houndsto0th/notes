{"version":3,"sources":["notes/adapters/application.js","notes/app.js","notes/components/local-note.js","notes/controllers/notes.js","notes/initializers/export-application-global.js","notes/models/note.js","notes/router.js","notes/routes/notes.js","notes/templates/application.js","notes/templates/components/local-note.js","notes/templates/notes.js","notes/tests/adapters/application.jshint.js","notes/tests/app.jshint.js","notes/tests/components/local-note.jshint.js","notes/tests/controllers/notes.jshint.js","notes/tests/helpers/resolver.js","notes/tests/helpers/start-app.js","notes/tests/models/note.jshint.js","notes/tests/notes/tests/helpers/resolver.jshint.js","notes/tests/notes/tests/helpers/start-app.jshint.js","notes/tests/notes/tests/test-helper.jshint.js","notes/tests/notes/tests/unit/adapters/application-test.jshint.js","notes/tests/notes/tests/unit/components/local-note-test.jshint.js","notes/tests/notes/tests/unit/routes/notes-test.jshint.js","notes/tests/notes/tests/unit/views/notes-test.jshint.js","notes/tests/router.jshint.js","notes/tests/routes/notes.jshint.js","notes/tests/test-helper.js","notes/tests/unit/adapters/application-test.js","notes/tests/unit/components/local-note-test.js","notes/tests/unit/routes/notes-test.js","notes/tests/unit/views/notes-test.js","notes/tests/views/notes.jshint.js","notes/views/notes.js","vendor/ember-cli/app-suffix.js"],"sourcesContent":["define('notes/adapters/application', ['exports', 'ember-data', '../config/environment'], function (exports, DS, ENV) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].ActiveModelAdapter.extend({\n    host: ENV['default'].adapterURL\n  });\n\n});","define('notes/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', './config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('notes/components/local-note', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: \"article\",\n    classNames: [\"note\"],\n\n    actions: {\n      deleteNote: function (note) {\n        this.sendAction(\"deleteNote\", note);\n      }\n    }\n  });\n\n});","define('notes/controllers/notes', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].ArrayController.extend({\n\n    isAddingNewNote: false,\n\n    noteHasContent: (function () {\n      return this.get(\"noteCopy\") && this.get(\"noteCopy\").trim();\n    }).property(\"noteCopy\"),\n\n    actions: {\n      newNote: function () {\n        var body = this.get(\"noteCopy\");\n        var title = this.get(\"noteTitle\");\n        if (body) {\n          var note = this.store.createRecord(\"note\", { body: body, title: title });\n          this.set(\"noteCopy\", \"\");\n          note.save();\n          this.set(\"isAddingNewNote\", false);\n        }\n      },\n      deleteNote: function (note) {\n        note.destroyRecord();\n      }\n    }\n  });\n\n});","define('notes/initializers/export-application-global', ['exports', 'ember', '../config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal) {\n      window[classifiedName] = application;\n    }\n  };\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('notes/models/note', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    body: DS['default'].attr(\"string\"),\n    title: DS['default'].attr(\"string\")\n  });\n\n});","define('notes/router', ['exports', 'ember', './config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route(\"notes\", { path: \"/\" });\n  });\n\n  exports['default'] = Router;\n\n});","define('notes/routes/notes', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return this.store.find(\"note\");\n    }\n  });\n\n});","define('notes/templates/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1;\n\n\n    data.buffer.push(\"\\n\");\n    stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('notes/templates/components/local-note', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, escapeExpression=this.escapeExpression;\n\n\n    data.buffer.push(\"<div class=\\\"col-sm-3\\\">\\n  <div class=\\\"savedNote\\\">\\n      <h3>\");\n    stack1 = helpers._triageMustache.call(depth0, \"note.title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"</h3>\\n      <p>\\n      \");\n    stack1 = helpers._triageMustache.call(depth0, \"note.body\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n      </p>\\n  <section class=\\\"note-actions\\\">\\n    <a href=\\\"#\\\" class= \\\"delete btn x\\\" \");\n    data.buffer.push(escapeExpression(helpers.action.call(depth0, \"deleteNote\", \"note\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n    data.buffer.push(\">\\n      <span>\\n        <span class=\\\"s1\\\"></span>\\n        <span class=\\\"s2\\\"></span>\\n        <span class=\\\"s3\\\"></span>\\n      </span>\\n    </a>\\n  </section>\\n    </div>\\n  </div>\\n</div>\\n\\n\");\n    stack1 = helpers._triageMustache.call(depth0, \"yield\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('notes/templates/notes', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n  function program1(depth0,data) {\n    \n    var buffer = '', helper, options;\n    data.buffer.push(\"\\n    \");\n    data.buffer.push(escapeExpression((helper = helpers['local-note'] || (depth0 && depth0['local-note']),options={hash:{\n      'note': (\"note\"),\n      'deleteNote': (\"deleteNote\")\n    },hashTypes:{'note': \"ID\",'deleteNote': \"STRING\"},hashContexts:{'note': depth0,'deleteNote': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"local-note\", options))));\n    data.buffer.push(\"\\n  \");\n    return buffer;\n    }\n\n    data.buffer.push(\"\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-4 col-md-offset-4\\\">\\n  <div class=\\\"newNote\\\">\\n    \");\n    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n      'type': (\"text\"),\n      'placeholder': (\"Enter a Title\"),\n      'value': (\"noteTitle\")\n    },hashTypes:{'type': \"ID\",'placeholder': \"STRING\",'value': \"ID\"},hashContexts:{'type': depth0,'placeholder': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n    data.buffer.push(\"\\n    \");\n    data.buffer.push(escapeExpression((helper = helpers.textarea || (depth0 && depth0.textarea),options={hash:{\n      'placeholder': (\"Add a note!\"),\n      'value': (\"noteCopy\")\n    },hashTypes:{'placeholder': \"STRING\",'value': \"ID\"},hashContexts:{'placeholder': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n    data.buffer.push(\"\\n  <div class=\\\"buttonContain\\\">\\n    <a href=\\\"#\\\" \");\n    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\n      'class': (\":btn noteHasContent:plus:menu\")\n    },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\n    data.buffer.push(\" \");\n    data.buffer.push(escapeExpression(helpers.action.call(depth0, \"newNote\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n    data.buffer.push(\">\\n      <span>\\n        <span class=\\\"s1\\\"></span>\\n        <span class=\\\"s2\\\"></span>\\n        <span class=\\\"s3\\\"></span>\\n      </span>\\n    </a>\\n  </div>\\n  </div>\\n  </div>\\n</div>\\n\\n\\n<div class=\\\"row\\\">\\n  \");\n    stack1 = helpers.each.call(depth0, \"note\", \"in\", \"model\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n</div>\\n\\n\");\n    stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n</div>\\n\");\n    return buffer;\n    \n  });\n\n});","define('notes/tests/adapters/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - adapters');\n  test('adapters/application.js should pass jshint', function() { \n    ok(true, 'adapters/application.js should pass jshint.'); \n  });\n\n});","define('notes/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('notes/tests/components/local-note.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/local-note.js should pass jshint', function() { \n    ok(true, 'components/local-note.js should pass jshint.'); \n  });\n\n});","define('notes/tests/controllers/notes.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/notes.js should pass jshint', function() { \n    ok(true, 'controllers/notes.js should pass jshint.'); \n  });\n\n});","define('notes/tests/helpers/resolver', ['exports', 'ember/resolver', '../../config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('notes/tests/helpers/start-app', ['exports', 'ember', '../../app', '../../router', '../../config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n  exports['default'] = startApp;\n\n});","define('notes/tests/models/note.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/note.js should pass jshint', function() { \n    ok(true, 'models/note.js should pass jshint.'); \n  });\n\n});","define('notes/tests/notes/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - notes/tests/helpers');\n  test('notes/tests/helpers/resolver.js should pass jshint', function() { \n    ok(true, 'notes/tests/helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('notes/tests/notes/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - notes/tests/helpers');\n  test('notes/tests/helpers/start-app.js should pass jshint', function() { \n    ok(true, 'notes/tests/helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('notes/tests/notes/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - notes/tests');\n  test('notes/tests/test-helper.js should pass jshint', function() { \n    ok(true, 'notes/tests/test-helper.js should pass jshint.'); \n  });\n\n});","define('notes/tests/notes/tests/unit/adapters/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - notes/tests/unit/adapters');\n  test('notes/tests/unit/adapters/application-test.js should pass jshint', function() { \n    ok(true, 'notes/tests/unit/adapters/application-test.js should pass jshint.'); \n  });\n\n});","define('notes/tests/notes/tests/unit/components/local-note-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - notes/tests/unit/components');\n  test('notes/tests/unit/components/local-note-test.js should pass jshint', function() { \n    ok(true, 'notes/tests/unit/components/local-note-test.js should pass jshint.'); \n  });\n\n});","define('notes/tests/notes/tests/unit/routes/notes-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - notes/tests/unit/routes');\n  test('notes/tests/unit/routes/notes-test.js should pass jshint', function() { \n    ok(true, 'notes/tests/unit/routes/notes-test.js should pass jshint.'); \n  });\n\n});","define('notes/tests/notes/tests/unit/views/notes-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - notes/tests/unit/views');\n  test('notes/tests/unit/views/notes-test.js should pass jshint', function() { \n    ok(true, 'notes/tests/unit/views/notes-test.js should pass jshint.'); \n  });\n\n});","define('notes/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('notes/tests/routes/notes.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/notes.js should pass jshint', function() { \n    ok(true, 'routes/notes.js should pass jshint.'); \n  });\n\n});","define('notes/tests/test-helper', ['./helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n\tdocument.write(\"<div id=\\\"ember-testing-container\\\"><div id=\\\"ember-testing\\\"></div></div>\");\n\n\tQUnit.config.urlConfig.push({ id: \"nocontainer\", label: \"Hide container\" });\n\tvar containerVisibility = QUnit.urlParams.nocontainer ? \"hidden\" : \"visible\";\n\tdocument.getElementById(\"ember-testing-container\").style.visibility = containerVisibility;\n\n});","define('notes/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"adapter:application\", \"ApplicationAdapter\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var adapter = this.subject();\n    ok(adapter);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","define('notes/tests/unit/components/local-note-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"local-note\", \"LocalNoteComponent\", {});\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('notes/tests/unit/routes/notes-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:notes\", \"NotesRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('notes/tests/unit/views/notes-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"view:notes\", \"NotesView\");\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var view = this.subject();\n    ok(view);\n  });\n\n});","define('notes/tests/views/notes.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - views');\n  test('views/notes.js should pass jshint', function() { \n    ok(true, 'views/notes.js should pass jshint.'); \n  });\n\n});","define('notes/views/notes', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].View.extend({});\n\n});","/* jshint ignore:start */\n\ndefine('notes/config/environment', ['ember'], function(Ember) {\n  var prefix = 'notes';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"notes/tests/test-helper\");\n} else {\n  require(\"notes/app\")[\"default\"].create({});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"notes.js"}